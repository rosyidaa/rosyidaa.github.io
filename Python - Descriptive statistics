{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GgkifaHCa_Ti"
      },
      "source": [
        "# Introduction to Probability and Statistics"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XvIqnHVwa_Tm"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Assignment\n",
        "\n",
        "In this assignment, we will use the dataset of diabetes patients taken [from here](https://www4.stat.ncsu.edu/~boos/var.select/diabetes.html)."
      ],
      "metadata": {
        "id": "f_kXATVzpvc3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"https://www4.stat.ncsu.edu/~boos/var.select/diabetes.tab.txt\",sep='\\t')\n",
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "veItGeQxpN-I",
        "outputId": "23fb37f9-8bd0-4f11-fe80-d2c03c0660f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   AGE  SEX   BMI     BP   S1     S2    S3    S4      S5  S6    Y\n",
              "0   59    2  32.1  101.0  157   93.2  38.0  4.00  4.8598  87  151\n",
              "1   48    1  21.6   87.0  183  103.2  70.0  3.00  3.8918  69   75\n",
              "2   72    2  30.5   93.0  156   93.6  41.0  4.00  4.6728  85  141\n",
              "3   24    1  25.3   84.0  198  131.4  40.0  5.00  4.8903  89  206\n",
              "4   50    1  23.0  101.0  192  125.4  52.0  4.00  4.2905  80  135\n",
              "5   23    1  22.6   89.0  139   64.8  61.0  2.00  4.1897  68   97\n",
              "6   36    2  22.0   90.0  160   99.6  50.0  3.00  3.9512  82  138\n",
              "7   66    2  26.2  114.0  255  185.0  56.0  4.55  4.2485  92   63\n",
              "8   60    2  32.1   83.0  179  119.4  42.0  4.00  4.4773  94  110\n",
              "9   29    1  30.0   85.0  180   93.4  43.0  4.00  5.3845  88  310"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-715eca4c-3fd6-4970-a620-1a003ea966bc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AGE</th>\n",
              "      <th>SEX</th>\n",
              "      <th>BMI</th>\n",
              "      <th>BP</th>\n",
              "      <th>S1</th>\n",
              "      <th>S2</th>\n",
              "      <th>S3</th>\n",
              "      <th>S4</th>\n",
              "      <th>S5</th>\n",
              "      <th>S6</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>59</td>\n",
              "      <td>2</td>\n",
              "      <td>32.1</td>\n",
              "      <td>101.0</td>\n",
              "      <td>157</td>\n",
              "      <td>93.2</td>\n",
              "      <td>38.0</td>\n",
              "      <td>4.00</td>\n",
              "      <td>4.8598</td>\n",
              "      <td>87</td>\n",
              "      <td>151</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>48</td>\n",
              "      <td>1</td>\n",
              "      <td>21.6</td>\n",
              "      <td>87.0</td>\n",
              "      <td>183</td>\n",
              "      <td>103.2</td>\n",
              "      <td>70.0</td>\n",
              "      <td>3.00</td>\n",
              "      <td>3.8918</td>\n",
              "      <td>69</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>72</td>\n",
              "      <td>2</td>\n",
              "      <td>30.5</td>\n",
              "      <td>93.0</td>\n",
              "      <td>156</td>\n",
              "      <td>93.6</td>\n",
              "      <td>41.0</td>\n",
              "      <td>4.00</td>\n",
              "      <td>4.6728</td>\n",
              "      <td>85</td>\n",
              "      <td>141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>24</td>\n",
              "      <td>1</td>\n",
              "      <td>25.3</td>\n",
              "      <td>84.0</td>\n",
              "      <td>198</td>\n",
              "      <td>131.4</td>\n",
              "      <td>40.0</td>\n",
              "      <td>5.00</td>\n",
              "      <td>4.8903</td>\n",
              "      <td>89</td>\n",
              "      <td>206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "      <td>23.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>192</td>\n",
              "      <td>125.4</td>\n",
              "      <td>52.0</td>\n",
              "      <td>4.00</td>\n",
              "      <td>4.2905</td>\n",
              "      <td>80</td>\n",
              "      <td>135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>23</td>\n",
              "      <td>1</td>\n",
              "      <td>22.6</td>\n",
              "      <td>89.0</td>\n",
              "      <td>139</td>\n",
              "      <td>64.8</td>\n",
              "      <td>61.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>4.1897</td>\n",
              "      <td>68</td>\n",
              "      <td>97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>36</td>\n",
              "      <td>2</td>\n",
              "      <td>22.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>160</td>\n",
              "      <td>99.6</td>\n",
              "      <td>50.0</td>\n",
              "      <td>3.00</td>\n",
              "      <td>3.9512</td>\n",
              "      <td>82</td>\n",
              "      <td>138</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>66</td>\n",
              "      <td>2</td>\n",
              "      <td>26.2</td>\n",
              "      <td>114.0</td>\n",
              "      <td>255</td>\n",
              "      <td>185.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>4.55</td>\n",
              "      <td>4.2485</td>\n",
              "      <td>92</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>60</td>\n",
              "      <td>2</td>\n",
              "      <td>32.1</td>\n",
              "      <td>83.0</td>\n",
              "      <td>179</td>\n",
              "      <td>119.4</td>\n",
              "      <td>42.0</td>\n",
              "      <td>4.00</td>\n",
              "      <td>4.4773</td>\n",
              "      <td>94</td>\n",
              "      <td>110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>29</td>\n",
              "      <td>1</td>\n",
              "      <td>30.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>180</td>\n",
              "      <td>93.4</td>\n",
              "      <td>43.0</td>\n",
              "      <td>4.00</td>\n",
              "      <td>5.3845</td>\n",
              "      <td>88</td>\n",
              "      <td>310</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-715eca4c-3fd6-4970-a620-1a003ea966bc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-715eca4c-3fd6-4970-a620-1a003ea966bc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-715eca4c-3fd6-4970-a620-1a003ea966bc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this dataset, columns as the following:\n",
        "* Age and sex are self-explanatory\n",
        "* BMI is body mass index\n",
        "* BP is average blood pressure\n",
        "* S1 through S6 are different blood measurements\n",
        "* Y is the qualitative measure of disease progression over one year"
      ],
      "metadata": {
        "id": "z7iY3XWnkuIe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tE3yfmBzk1H0",
        "outputId": "0ed90bb9-2de0-4d34-d302-12be3c950a6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 442 entries, 0 to 441\n",
            "Data columns (total 11 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   AGE     442 non-null    int64  \n",
            " 1   SEX     442 non-null    int64  \n",
            " 2   BMI     442 non-null    float64\n",
            " 3   BP      442 non-null    float64\n",
            " 4   S1      442 non-null    int64  \n",
            " 5   S2      442 non-null    float64\n",
            " 6   S3      442 non-null    float64\n",
            " 7   S4      442 non-null    float64\n",
            " 8   S5      442 non-null    float64\n",
            " 9   S6      442 non-null    int64  \n",
            " 10  Y       442 non-null    int64  \n",
            "dtypes: float64(6), int64(5)\n",
            "memory usage: 38.1 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"SEX\"] = df[\"SEX\"].astype(\"category\")\n",
        "df[\"SEX\"].dtype"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0XoQc5yUlAwp",
        "outputId": "79b895c4-58d4-4b07-8fef-4b3efa58e338"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CategoricalDtype(categories=[1, 2], ordered=False)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's study this dataset using methods of probability and statistics."
      ],
      "metadata": {
        "id": "TIFGCO3Wp_A-"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Kl1hy0M7a_To"
      },
      "source": [
        "\n",
        "## Task 1: Compute mean values and variance for all values"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Mean"
      ],
      "metadata": {
        "id": "wDIskQhJoDze"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6tzGA434nzFX",
        "outputId": "ba0a4be2-8ad1-42c3-b0b7-1a66dc63820a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "AGE     48.518100\n",
              "BMI     26.375792\n",
              "BP      94.647014\n",
              "S1     189.140271\n",
              "S2     115.439140\n",
              "S3      49.788462\n",
              "S4       4.070249\n",
              "S5       4.641411\n",
              "S6      91.260181\n",
              "Y      152.133484\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.mean(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lwlxbVPKoISi",
        "outputId": "255ab402-511f-4f5d-831d-9214bcc409c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "AGE     48.518100\n",
              "BMI     26.375792\n",
              "BP      94.647014\n",
              "S1     189.140271\n",
              "S2     115.439140\n",
              "S3      49.788462\n",
              "S4       4.070249\n",
              "S5       4.641411\n",
              "S6      91.260181\n",
              "Y      152.133484\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Variance"
      ],
      "metadata": {
        "id": "KU9ua_BgoYjy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.var()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WOLVk-jppB7T",
        "outputId": "008f8b8b-a8e2-4968-e45d-d7d4f6616af8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "AGE     171.846610\n",
              "BMI      19.519798\n",
              "BP      191.304401\n",
              "S1     1197.717241\n",
              "S2      924.955494\n",
              "S3      167.293585\n",
              "S4        1.665261\n",
              "S5        0.272892\n",
              "S6      132.165712\n",
              "Y      5943.331348\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.var(df, ddof=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eksN6zaao9S1",
        "outputId": "64c3bb33-b996-4d68-c44e-f35980bbdd34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "AGE     171.846610\n",
              "BMI      19.519798\n",
              "BP      191.304401\n",
              "S1     1197.717241\n",
              "S2      924.955494\n",
              "S3      167.293585\n",
              "S4        1.665261\n",
              "S5        0.272892\n",
              "S6      132.165712\n",
              "Y      5943.331348\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-fbST5Qta_Tp"
      },
      "source": [
        "## Task 2: Plot boxplots for BMI, BP and Y depending on gender"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YBSDwPADa_Tq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 830
        },
        "outputId": "72efe29f-0d24-4749-d300-ef4e8b2de83f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Boxplot for BMI depending on gender'}, xlabel='SEX', ylabel='BMI'>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x900 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize = (4, 9))\n",
        "sns.set_style(\"darkgrid\")\n",
        "sns.set_palette(\"Paired\")\n",
        "plt.title(\"Boxplot for BMI depending on gender\")\n",
        "sns.boxplot(x=\"SEX\", y = 'BMI', data = df)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (3, 7))\n",
        "sns.set_style(\"darkgrid\")\n",
        "sns.set_palette(\"Set2\")\n",
        "plt.title(\"Boxplot for BP depending on gender\")\n",
        "sns.boxplot(x=\"SEX\", y = \"BP\", data = df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 676
        },
        "id": "h5KGWOrlr72z",
        "outputId": "fc379f97-b230-48dc-c1f2-49e270507fca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Boxplot for BP depending on gender'}, xlabel='SEX', ylabel='BP'>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 300x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (3, 5))\n",
        "sns.set_style(\"darkgrid\")\n",
        "sns.set_palette(\"Set3\")\n",
        "plt.title(\"Boxplot for Y depending on gender\")\n",
        "sns.boxplot(x=\"SEX\", y = 'Y', data = df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 522
        },
        "id": "WWjkqyVNso2f",
        "outputId": "34f90c73-ce61-44ed-d094-f398dfaedb3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Boxplot for Y depending on gender'}, xlabel='SEX', ylabel='Y'>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 300x500 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I-Rfz6gXa_Tq"
      },
      "source": [
        "## Task 3: What is the the distribution of Age, Sex, BMI and Y variables?"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install -U distfit"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9BRefs6Txett",
        "outputId": "4a09d5c1-192f-42f0-c70b-965579b8b53c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: distfit in /usr/local/lib/python3.9/dist-packages (1.6.10)\n",
            "Requirement already satisfied: colourmap>=1.1.10 in /usr/local/lib/python3.9/dist-packages (from distfit) (1.1.11)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.9/dist-packages (from distfit) (23.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from distfit) (1.22.4)\n",
            "Requirement already satisfied: statsmodels in /usr/local/lib/python3.9/dist-packages (from distfit) (0.13.5)\n",
            "Requirement already satisfied: matplotlib>=3.5.2 in /usr/local/lib/python3.9/dist-packages (from distfit) (3.7.1)\n",
            "Requirement already satisfied: pypickle in /usr/local/lib/python3.9/dist-packages (from distfit) (1.1.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (from distfit) (1.5.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.9/dist-packages (from distfit) (4.65.0)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.9/dist-packages (from distfit) (1.10.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.5.2->distfit) (1.0.7)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.5.2->distfit) (4.39.3)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.5.2->distfit) (1.4.4)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.5.2->distfit) (3.0.9)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.5.2->distfit) (2.8.2)\n",
            "Requirement already satisfied: importlib-resources>=3.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.5.2->distfit) (5.12.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.5.2->distfit) (8.4.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=3.5.2->distfit) (0.11.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas->distfit) (2022.7.1)\n",
            "Requirement already satisfied: patsy>=0.5.2 in /usr/local/lib/python3.9/dist-packages (from statsmodels->distfit) (0.5.3)\n",
            "Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.9/dist-packages (from importlib-resources>=3.2.0->matplotlib>=3.5.2->distfit) (3.15.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.9/dist-packages (from patsy>=0.5.2->statsmodels->distfit) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from distfit import distfit"
      ],
      "metadata": {
        "id": "da6uHFS-zt9M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###The Distribution of Age"
      ],
      "metadata": {
        "id": "z72fasilu7ls"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6Ogg0COqa_Tq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "outputId": "5e94e825-60ca-46d7-cf80-1cb00dba885c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7fef0d921b20>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(df[\"AGE\"], bins=30, kind=\"hist\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Initiate model\n",
        "dist1 = distfit(bins=25,alpha=0.02,stats='ks')\n",
        "\n",
        "#Fit to the data\n",
        "dist1.fit_transform(df[\"AGE\"],verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3i9feLs3z3C5",
        "outputId": "af7e1064-1021-45b7-943d-0b31c48feb0a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[distfit] >INFO> fit\n",
            "[distfit] >INFO> transform\n",
            "[distfit] >DEBUG> (48.51809954751131, 13.094190207980025)\n",
            "[distfit] >INFO> [norm      ] [0.01 sec] [ks: 0.00194497] [loc=48.518 scale=13.094]\n",
            "[distfit] >DEBUG> (19.0, 29.518099547511312)\n",
            "[distfit] >INFO> [expon     ] [0.00 sec] [ks: 0.0385821] [loc=19.000 scale=29.518]\n",
            "[distfit] >DEBUG> (291005679.2727212, -8589934573.0, 8589934591.999999)\n",
            "[distfit] >INFO> [pareto    ] [0.00 sec] [ks: 0.0385821] [loc=-8589934573.000 scale=8589934592.000]\n",
            "[distfit] >DEBUG> (1.3818062974031922, 48.50523931773397, 11.77857704032206)\n",
            "[distfit] >INFO> [dweibull  ] [0.02 sec] [ks: 0.00194497] [loc=48.505 scale=11.779]\n",
            "[distfit] >DEBUG> (12596677.993393298, 48.51969352268459, 13.094311556383104)\n",
            "[distfit] >INFO> [t         ] [0.18 sec] [ks: 0.00194497] [loc=48.520 scale=13.094]\n",
            "[distfit] >DEBUG> (4.5900914374065245, 78.15648531145331, 3.871809549224796)\n",
            "[distfit] >INFO> [genextreme] [0.24 sec] [ks: 5.07088] [loc=78.156 scale=3.872]\n",
            "[distfit] >DEBUG> (312.1159550189225, -185.56547865142215, 0.7500202771522435)\n",
            "[distfit] >INFO> [gamma     ] [0.07 sec] [ks: 0.00194497] [loc=-185.565 scale=0.750]\n",
            "[distfit] >DEBUG> (0.017590234670681916, -693.2757093815476, 741.5698846996397)\n",
            "[distfit] >INFO> [lognorm   ] [0.14 sec] [ks: 0.00194497] [loc=-693.276 scale=741.570]\n",
            "[distfit] >DEBUG> (3.262175495534837, 2.8686869769748133, 11.297816718906464, 69.7699248935984)\n",
            "[distfit] >INFO> [beta      ] [0.03 sec] [ks: 0.148617] [loc=11.298 scale=69.770]\n",
            "[distfit] >DEBUG> (19.0, 60.0)\n",
            "[distfit] >INFO> [uniform   ] [0.00 sec] [ks: 2.71654] [loc=19.000 scale=60.000]\n",
            "[distfit] >DEBUG> (7.773810854696967, -21.925744287386177, 35.4869154204863)\n",
            "[distfit] >INFO> [loggamma  ] [0.04 sec] [ks: 0.00194497] [loc=-21.926 scale=35.487]\n",
            "[distfit] >INFO> Compute confidence intervals [parametric]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'model': {'name': 'norm',\n",
              "  'score': 0.0019449705409448801,\n",
              "  'loc': 48.51809954751131,\n",
              "  'scale': 13.094190207980025,\n",
              "  'arg': (),\n",
              "  'params': (48.51809954751131, 13.094190207980025),\n",
              "  'model': <scipy.stats._distn_infrastructure.rv_continuous_frozen at 0x7fef0d89fc10>,\n",
              "  'bootstrap_score': 0,\n",
              "  'bootstrap_pass': None,\n",
              "  'color': '#e41a1c',\n",
              "  'CII_min_alpha': 21.625920672266453,\n",
              "  'CII_max_alpha': 75.41027842275616},\n",
              " 'summary':           name     score           loc              scale  \\\n",
              " 0         norm  0.001945       48.5181           13.09419   \n",
              " 1     dweibull  0.001945     48.505239          11.778577   \n",
              " 2            t  0.001945     48.519694          13.094312   \n",
              " 3        gamma  0.001945   -185.565479            0.75002   \n",
              " 4      lognorm  0.001945   -693.275709         741.569885   \n",
              " 5     loggamma  0.001945    -21.925744          35.486915   \n",
              " 6        expon  0.038582          19.0            29.5181   \n",
              " 7       pareto  0.038582 -8589934573.0  8589934591.999999   \n",
              " 8         beta  0.148617     11.297817          69.769925   \n",
              " 9      uniform  2.716536          19.0               60.0   \n",
              " 10  genextreme  5.070877     78.156485            3.87181   \n",
              " \n",
              "                                         arg  \\\n",
              " 0                                        ()   \n",
              " 1                     (1.3818062974031922,)   \n",
              " 2                     (12596677.993393298,)   \n",
              " 3                      (312.1159550189225,)   \n",
              " 4                   (0.017590234670681916,)   \n",
              " 5                      (7.773810854696967,)   \n",
              " 6                                        ()   \n",
              " 7                      (291005679.2727212,)   \n",
              " 8   (3.262175495534837, 2.8686869769748133)   \n",
              " 9                                        ()   \n",
              " 10                    (4.5900914374065245,)   \n",
              " \n",
              "                                                params  \\\n",
              " 0             (48.51809954751131, 13.094190207980025)   \n",
              " 1   (1.3818062974031922, 48.50523931773397, 11.778...   \n",
              " 2   (12596677.993393298, 48.51969352268459, 13.094...   \n",
              " 3   (312.1159550189225, -185.56547865142215, 0.750...   \n",
              " 4   (0.017590234670681916, -693.2757093815476, 741...   \n",
              " 5   (7.773810854696967, -21.925744287386177, 35.48...   \n",
              " 6                          (19.0, 29.518099547511312)   \n",
              " 7   (291005679.2727212, -8589934573.0, 8589934591....   \n",
              " 8   (3.262175495534837, 2.8686869769748133, 11.297...   \n",
              " 9                                        (19.0, 60.0)   \n",
              " 10  (4.5900914374065245, 78.15648531145331, 3.8718...   \n",
              " \n",
              "                                                 model bootstrap_score  \\\n",
              " 0   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 1   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 2   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 3   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 4   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 5   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 6   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 7   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 8   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 9   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 10  <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " \n",
              "    bootstrap_pass    color  \n",
              " 0            None  #e41a1c  \n",
              " 1            None  #e41a1c  \n",
              " 2            None  #377eb8  \n",
              " 3            None  #4daf4a  \n",
              " 4            None  #984ea3  \n",
              " 5            None  #ff7f00  \n",
              " 6            None  #ffff33  \n",
              " 7            None  #a65628  \n",
              " 8            None  #f781bf  \n",
              " 9            None  #999999  \n",
              " 10           None  #999999  ,\n",
              " 'histdata': (array([0.00754148, 0.00754148, 0.00942685, 0.01131222, 0.00848416,\n",
              "         0.01602564, 0.01979638, 0.0245098 , 0.01036953, 0.02356712,\n",
              "         0.01696833, 0.02168175, 0.03676471, 0.02828054, 0.02828054,\n",
              "         0.0311086 , 0.01791101, 0.03959276, 0.00848416, 0.0122549 ,\n",
              "         0.0245098 , 0.00565611, 0.00282805, 0.00188537, 0.00188537]),\n",
              "  array([20.2, 22.6, 25. , 27.4, 29.8, 32.2, 34.6, 37. , 39.4, 41.8, 44.2,\n",
              "         46.6, 49. , 51.4, 53.8, 56.2, 58.6, 61. , 63.4, 65.8, 68.2, 70.6,\n",
              "         73. , 75.4, 77.8])),\n",
              " 'size': 442,\n",
              " 'alpha': 0.02,\n",
              " 'stats': 'ks',\n",
              " 'bins': 25,\n",
              " 'bound': 'both',\n",
              " 'name': 'popular',\n",
              " 'method': 'parametric',\n",
              " 'multtest': 'fdr_bh',\n",
              " 'n_perm': 10000,\n",
              " 'smooth': None,\n",
              " 'weighted': True,\n",
              " 'f': 1.5,\n",
              " 'n_boots': None,\n",
              " 'random_state': None}"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dist1.summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 771
        },
        "id": "LVwbXJGE0bQV",
        "outputId": "92c48c61-9de4-40a6-889c-e2b4d5f06134"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          name     score           loc              scale  \\\n",
              "0         norm  0.001945       48.5181           13.09419   \n",
              "1     dweibull  0.001945     48.505239          11.778577   \n",
              "2            t  0.001945     48.519694          13.094312   \n",
              "3        gamma  0.001945   -185.565479            0.75002   \n",
              "4      lognorm  0.001945   -693.275709         741.569885   \n",
              "5     loggamma  0.001945    -21.925744          35.486915   \n",
              "6        expon  0.038582          19.0            29.5181   \n",
              "7       pareto  0.038582 -8589934573.0  8589934591.999999   \n",
              "8         beta  0.148617     11.297817          69.769925   \n",
              "9      uniform  2.716536          19.0               60.0   \n",
              "10  genextreme  5.070877     78.156485            3.87181   \n",
              "\n",
              "                                        arg  \\\n",
              "0                                        ()   \n",
              "1                     (1.3818062974031922,)   \n",
              "2                     (12596677.993393298,)   \n",
              "3                      (312.1159550189225,)   \n",
              "4                   (0.017590234670681916,)   \n",
              "5                      (7.773810854696967,)   \n",
              "6                                        ()   \n",
              "7                      (291005679.2727212,)   \n",
              "8   (3.262175495534837, 2.8686869769748133)   \n",
              "9                                        ()   \n",
              "10                    (4.5900914374065245,)   \n",
              "\n",
              "                                               params  \\\n",
              "0             (48.51809954751131, 13.094190207980025)   \n",
              "1   (1.3818062974031922, 48.50523931773397, 11.778...   \n",
              "2   (12596677.993393298, 48.51969352268459, 13.094...   \n",
              "3   (312.1159550189225, -185.56547865142215, 0.750...   \n",
              "4   (0.017590234670681916, -693.2757093815476, 741...   \n",
              "5   (7.773810854696967, -21.925744287386177, 35.48...   \n",
              "6                          (19.0, 29.518099547511312)   \n",
              "7   (291005679.2727212, -8589934573.0, 8589934591....   \n",
              "8   (3.262175495534837, 2.8686869769748133, 11.297...   \n",
              "9                                        (19.0, 60.0)   \n",
              "10  (4.5900914374065245, 78.15648531145331, 3.8718...   \n",
              "\n",
              "                                                model bootstrap_score  \\\n",
              "0   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "1   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "2   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "3   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "4   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "5   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "6   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "7   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "8   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "9   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "10  <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "\n",
              "   bootstrap_pass    color  \n",
              "0            None  #e41a1c  \n",
              "1            None  #e41a1c  \n",
              "2            None  #377eb8  \n",
              "3            None  #4daf4a  \n",
              "4            None  #984ea3  \n",
              "5            None  #ff7f00  \n",
              "6            None  #ffff33  \n",
              "7            None  #a65628  \n",
              "8            None  #f781bf  \n",
              "9            None  #999999  \n",
              "10           None  #999999  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e8d9b37f-3106-4fb2-b028-83c4dba5d793\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>score</th>\n",
              "      <th>loc</th>\n",
              "      <th>scale</th>\n",
              "      <th>arg</th>\n",
              "      <th>params</th>\n",
              "      <th>model</th>\n",
              "      <th>bootstrap_score</th>\n",
              "      <th>bootstrap_pass</th>\n",
              "      <th>color</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>norm</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>48.5181</td>\n",
              "      <td>13.09419</td>\n",
              "      <td>()</td>\n",
              "      <td>(48.51809954751131, 13.094190207980025)</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#e41a1c</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>dweibull</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>48.505239</td>\n",
              "      <td>11.778577</td>\n",
              "      <td>(1.3818062974031922,)</td>\n",
              "      <td>(1.3818062974031922, 48.50523931773397, 11.778...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#e41a1c</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>t</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>48.519694</td>\n",
              "      <td>13.094312</td>\n",
              "      <td>(12596677.993393298,)</td>\n",
              "      <td>(12596677.993393298, 48.51969352268459, 13.094...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#377eb8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>gamma</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>-185.565479</td>\n",
              "      <td>0.75002</td>\n",
              "      <td>(312.1159550189225,)</td>\n",
              "      <td>(312.1159550189225, -185.56547865142215, 0.750...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#4daf4a</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>lognorm</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>-693.275709</td>\n",
              "      <td>741.569885</td>\n",
              "      <td>(0.017590234670681916,)</td>\n",
              "      <td>(0.017590234670681916, -693.2757093815476, 741...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#984ea3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>loggamma</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>-21.925744</td>\n",
              "      <td>35.486915</td>\n",
              "      <td>(7.773810854696967,)</td>\n",
              "      <td>(7.773810854696967, -21.925744287386177, 35.48...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#ff7f00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>expon</td>\n",
              "      <td>0.038582</td>\n",
              "      <td>19.0</td>\n",
              "      <td>29.5181</td>\n",
              "      <td>()</td>\n",
              "      <td>(19.0, 29.518099547511312)</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#ffff33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>pareto</td>\n",
              "      <td>0.038582</td>\n",
              "      <td>-8589934573.0</td>\n",
              "      <td>8589934591.999999</td>\n",
              "      <td>(291005679.2727212,)</td>\n",
              "      <td>(291005679.2727212, -8589934573.0, 8589934591....</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#a65628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>beta</td>\n",
              "      <td>0.148617</td>\n",
              "      <td>11.297817</td>\n",
              "      <td>69.769925</td>\n",
              "      <td>(3.262175495534837, 2.8686869769748133)</td>\n",
              "      <td>(3.262175495534837, 2.8686869769748133, 11.297...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#f781bf</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>uniform</td>\n",
              "      <td>2.716536</td>\n",
              "      <td>19.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>()</td>\n",
              "      <td>(19.0, 60.0)</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#999999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>genextreme</td>\n",
              "      <td>5.070877</td>\n",
              "      <td>78.156485</td>\n",
              "      <td>3.87181</td>\n",
              "      <td>(4.5900914374065245,)</td>\n",
              "      <td>(4.5900914374065245, 78.15648531145331, 3.8718...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#999999</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e8d9b37f-3106-4fb2-b028-83c4dba5d793')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e8d9b37f-3106-4fb2-b028-83c4dba5d793 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e8d9b37f-3106-4fb2-b028-83c4dba5d793');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Berdasarkan output dari dist1.summary, terdapat kolom score yang menunjukkan nilai goodness of fit, yaitu jarak antara data yang diharapkan dan data yang diberikan, dimana nilai yang lebih rendah akan lebih baik. Nilai ini menjadi acuan dalam menentukan distribusi yang sesuai dengan data."
      ],
      "metadata": {
        "id": "SMwYdOfg1UJ1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Kesimpulan: Variabel Age berdistribusi normal"
      ],
      "metadata": {
        "id": "t5Spbmhp2zAW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###The Distribution of Sex"
      ],
      "metadata": {
        "id": "1xVcWUCRwWd7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Variabel Sex merupakan data kategorik sehingga kurang tepat jika dilakukan penentuan distribusi datanya."
      ],
      "metadata": {
        "id": "DbSilPSTwr3_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###The Distribution of BMI"
      ],
      "metadata": {
        "id": "N6lYajnBw3xg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.displot(df[\"BMI\"], bins=30, kind=\"hist\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "kiXAfRWXwrSl",
        "outputId": "3a7d36d0-1d82-466a-9213-239abf677a37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7fef0d921d60>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Initiate model\n",
        "dist2 = distfit(bins=25,alpha=0.02,stats='ks')\n",
        "\n",
        "#Fit to the data\n",
        "dist2.fit_transform(df[\"BMI\"],verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jfkUNSY82-cT",
        "outputId": "2e573a00-45ef-4905-afbe-c739c0d38de9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[distfit] >INFO> fit\n",
            "[distfit] >INFO> transform\n",
            "[distfit] >DEBUG> (26.37579185520362, 4.413120855492464)\n",
            "[distfit] >INFO> [norm      ] [0.00 sec] [ks: 0.00194497] [loc=26.376 scale=4.413]\n",
            "[distfit] >DEBUG> (18.0, 8.37579185520362)\n",
            "[distfit] >INFO> [expon     ] [0.00 sec] [ks: 0.322892] [loc=18.000 scale=8.376]\n",
            "[distfit] >DEBUG> (64097929.673556685, -536870894.0, 536870911.99999994)\n",
            "[distfit] >INFO> [pareto    ] [0.00 sec] [ks: 0.322892] [loc=-536870894.000 scale=536870912.000]\n",
            "[distfit] >DEBUG> (1.322182364977301, 26.36196123900366, 3.8524950010068766)\n",
            "[distfit] >INFO> [dweibull  ] [0.02 sec] [ks: 0.00194497] [loc=26.362 scale=3.852]\n",
            "[distfit] >DEBUG> (171.90033802389462, 26.380960435534334, 4.402115215976934)\n",
            "[distfit] >INFO> [t         ] [0.20 sec] [ks: 0.00194497] [loc=26.381 scale=4.402]\n",
            "[distfit] >DEBUG> (0.08156612016846085, 24.458756166214116, 3.776378185047194)\n",
            "[distfit] >INFO> [genextreme] [0.08 sec] [ks: 0.00194497] [loc=24.459 scale=3.776]\n",
            "[distfit] >DEBUG> (5.901115016738883, 15.486785315726141, 1.845245234367988)\n",
            "[distfit] >INFO> [gamma     ] [0.02 sec] [ks: 0.00194497] [loc=15.487 scale=1.845]\n",
            "[distfit] >DEBUG> (0.27260035731506516, 10.23555948664335, 15.55531298057372)\n",
            "[distfit] >INFO> [lognorm   ] [0.08 sec] [ks: 0.00194497] [loc=10.236 scale=15.555]\n",
            "[distfit] >DEBUG> (2.8608688636729176, 8.262170861873983, 17.32467258433018, 35.18914522506922)\n",
            "[distfit] >INFO> [beta      ] [0.03 sec] [ks: 0.00194497] [loc=17.325 scale=35.189]\n",
            "[distfit] >DEBUG> (18.0, 24.200000000000003)\n",
            "[distfit] >INFO> [uniform   ] [0.00 sec] [ks: 2.71654] [loc=18.000 scale=24.200]\n",
            "[distfit] >DEBUG> (1475.3814730129707, -1232.6346877973501, 172.55233088505702)\n",
            "[distfit] >INFO> [loggamma  ] [0.06 sec] [ks: 0.00194497] [loc=-1232.635 scale=172.552]\n",
            "[distfit] >INFO> Compute confidence intervals [parametric]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'model': {'name': 'norm',\n",
              "  'score': 0.0019449705409448801,\n",
              "  'loc': 26.37579185520362,\n",
              "  'scale': 4.413120855492464,\n",
              "  'arg': (),\n",
              "  'params': (26.37579185520362, 4.413120855492464),\n",
              "  'model': <scipy.stats._distn_infrastructure.rv_continuous_frozen at 0x7fef0d75b070>,\n",
              "  'bootstrap_score': 0,\n",
              "  'bootstrap_pass': None,\n",
              "  'color': '#e41a1c',\n",
              "  'CII_min_alpha': 17.312349705749394,\n",
              "  'CII_max_alpha': 35.43923400465784},\n",
              " 'summary':           name     score          loc        scale  \\\n",
              " 0         norm  0.001945    26.375792     4.413121   \n",
              " 1     dweibull  0.001945    26.361961     3.852495   \n",
              " 2            t  0.001945     26.38096     4.402115   \n",
              " 3   genextreme  0.001945    24.458756     3.776378   \n",
              " 4        gamma  0.001945    15.486785     1.845245   \n",
              " 5      lognorm  0.001945    10.235559    15.555313   \n",
              " 6         beta  0.001945    17.324673    35.189145   \n",
              " 7     loggamma  0.001945 -1232.634688   172.552331   \n",
              " 8        expon  0.322892         18.0     8.375792   \n",
              " 9       pareto  0.322892 -536870894.0  536870912.0   \n",
              " 10     uniform  2.716536         18.0         24.2   \n",
              " \n",
              "                                         arg  \\\n",
              " 0                                        ()   \n",
              " 1                      (1.322182364977301,)   \n",
              " 2                     (171.90033802389462,)   \n",
              " 3                    (0.08156612016846085,)   \n",
              " 4                      (5.901115016738883,)   \n",
              " 5                    (0.27260035731506516,)   \n",
              " 6   (2.8608688636729176, 8.262170861873983)   \n",
              " 7                     (1475.3814730129707,)   \n",
              " 8                                        ()   \n",
              " 9                     (64097929.673556685,)   \n",
              " 10                                       ()   \n",
              " \n",
              "                                                params  \\\n",
              " 0              (26.37579185520362, 4.413120855492464)   \n",
              " 1   (1.322182364977301, 26.36196123900366, 3.85249...   \n",
              " 2   (171.90033802389462, 26.380960435534334, 4.402...   \n",
              " 3   (0.08156612016846085, 24.458756166214116, 3.77...   \n",
              " 4   (5.901115016738883, 15.486785315726141, 1.8452...   \n",
              " 5   (0.27260035731506516, 10.23555948664335, 15.55...   \n",
              " 6   (2.8608688636729176, 8.262170861873983, 17.324...   \n",
              " 7   (1475.3814730129707, -1232.6346877973501, 172....   \n",
              " 8                            (18.0, 8.37579185520362)   \n",
              " 9   (64097929.673556685, -536870894.0, 536870911.9...   \n",
              " 10                         (18.0, 24.200000000000003)   \n",
              " \n",
              "                                                 model bootstrap_score  \\\n",
              " 0   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 1   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 2   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 3   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 4   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 5   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 6   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 7   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 8   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 9   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 10  <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " \n",
              "    bootstrap_pass    color  \n",
              " 0            None  #e41a1c  \n",
              " 1            None  #e41a1c  \n",
              " 2            None  #377eb8  \n",
              " 3            None  #4daf4a  \n",
              " 4            None  #984ea3  \n",
              " 5            None  #ff7f00  \n",
              " 6            None  #ffff33  \n",
              " 7            None  #a65628  \n",
              " 8            None  #f781bf  \n",
              " 9            None  #999999  \n",
              " 10           None  #999999  ,\n",
              " 'histdata': (array([0.01636064, 0.03038405, 0.0537564 , 0.0467447 , 0.08180322,\n",
              "         0.09582663, 0.09816387, 0.09816387, 0.08414046, 0.06310534,\n",
              "         0.07245428, 0.04908193, 0.0467447 , 0.0467447 , 0.05141917,\n",
              "         0.03272129, 0.01402341, 0.02103511, 0.0070117 , 0.0070117 ,\n",
              "         0.00934894, 0.00233723, 0.        , 0.        , 0.00467447]),\n",
              "  array([18.484, 19.452, 20.42 , 21.388, 22.356, 23.324, 24.292, 25.26 ,\n",
              "         26.228, 27.196, 28.164, 29.132, 30.1  , 31.068, 32.036, 33.004,\n",
              "         33.972, 34.94 , 35.908, 36.876, 37.844, 38.812, 39.78 , 40.748,\n",
              "         41.716])),\n",
              " 'size': 442,\n",
              " 'alpha': 0.02,\n",
              " 'stats': 'ks',\n",
              " 'bins': 25,\n",
              " 'bound': 'both',\n",
              " 'name': 'popular',\n",
              " 'method': 'parametric',\n",
              " 'multtest': 'fdr_bh',\n",
              " 'n_perm': 10000,\n",
              " 'smooth': None,\n",
              " 'weighted': True,\n",
              " 'f': 1.5,\n",
              " 'n_boots': None,\n",
              " 'random_state': None}"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dist2.summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 788
        },
        "id": "2XVqDYk43Css",
        "outputId": "1d8cf7a3-b2fb-494d-fa56-0b7b66c006aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          name     score          loc        scale  \\\n",
              "0         norm  0.001945    26.375792     4.413121   \n",
              "1     dweibull  0.001945    26.361961     3.852495   \n",
              "2            t  0.001945     26.38096     4.402115   \n",
              "3   genextreme  0.001945    24.458756     3.776378   \n",
              "4        gamma  0.001945    15.486785     1.845245   \n",
              "5      lognorm  0.001945    10.235559    15.555313   \n",
              "6         beta  0.001945    17.324673    35.189145   \n",
              "7     loggamma  0.001945 -1232.634688   172.552331   \n",
              "8        expon  0.322892         18.0     8.375792   \n",
              "9       pareto  0.322892 -536870894.0  536870912.0   \n",
              "10     uniform  2.716536         18.0         24.2   \n",
              "\n",
              "                                        arg  \\\n",
              "0                                        ()   \n",
              "1                      (1.322182364977301,)   \n",
              "2                     (171.90033802389462,)   \n",
              "3                    (0.08156612016846085,)   \n",
              "4                      (5.901115016738883,)   \n",
              "5                    (0.27260035731506516,)   \n",
              "6   (2.8608688636729176, 8.262170861873983)   \n",
              "7                     (1475.3814730129707,)   \n",
              "8                                        ()   \n",
              "9                     (64097929.673556685,)   \n",
              "10                                       ()   \n",
              "\n",
              "                                               params  \\\n",
              "0              (26.37579185520362, 4.413120855492464)   \n",
              "1   (1.322182364977301, 26.36196123900366, 3.85249...   \n",
              "2   (171.90033802389462, 26.380960435534334, 4.402...   \n",
              "3   (0.08156612016846085, 24.458756166214116, 3.77...   \n",
              "4   (5.901115016738883, 15.486785315726141, 1.8452...   \n",
              "5   (0.27260035731506516, 10.23555948664335, 15.55...   \n",
              "6   (2.8608688636729176, 8.262170861873983, 17.324...   \n",
              "7   (1475.3814730129707, -1232.6346877973501, 172....   \n",
              "8                            (18.0, 8.37579185520362)   \n",
              "9   (64097929.673556685, -536870894.0, 536870911.9...   \n",
              "10                         (18.0, 24.200000000000003)   \n",
              "\n",
              "                                                model bootstrap_score  \\\n",
              "0   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "1   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "2   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "3   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "4   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "5   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "6   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "7   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "8   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "9   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "10  <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "\n",
              "   bootstrap_pass    color  \n",
              "0            None  #e41a1c  \n",
              "1            None  #e41a1c  \n",
              "2            None  #377eb8  \n",
              "3            None  #4daf4a  \n",
              "4            None  #984ea3  \n",
              "5            None  #ff7f00  \n",
              "6            None  #ffff33  \n",
              "7            None  #a65628  \n",
              "8            None  #f781bf  \n",
              "9            None  #999999  \n",
              "10           None  #999999  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-26d26f87-09aa-4e1d-bcba-0555ef5ebb6b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>score</th>\n",
              "      <th>loc</th>\n",
              "      <th>scale</th>\n",
              "      <th>arg</th>\n",
              "      <th>params</th>\n",
              "      <th>model</th>\n",
              "      <th>bootstrap_score</th>\n",
              "      <th>bootstrap_pass</th>\n",
              "      <th>color</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>norm</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>26.375792</td>\n",
              "      <td>4.413121</td>\n",
              "      <td>()</td>\n",
              "      <td>(26.37579185520362, 4.413120855492464)</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#e41a1c</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>dweibull</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>26.361961</td>\n",
              "      <td>3.852495</td>\n",
              "      <td>(1.322182364977301,)</td>\n",
              "      <td>(1.322182364977301, 26.36196123900366, 3.85249...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#e41a1c</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>t</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>26.38096</td>\n",
              "      <td>4.402115</td>\n",
              "      <td>(171.90033802389462,)</td>\n",
              "      <td>(171.90033802389462, 26.380960435534334, 4.402...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#377eb8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>genextreme</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>24.458756</td>\n",
              "      <td>3.776378</td>\n",
              "      <td>(0.08156612016846085,)</td>\n",
              "      <td>(0.08156612016846085, 24.458756166214116, 3.77...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#4daf4a</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>gamma</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>15.486785</td>\n",
              "      <td>1.845245</td>\n",
              "      <td>(5.901115016738883,)</td>\n",
              "      <td>(5.901115016738883, 15.486785315726141, 1.8452...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#984ea3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>lognorm</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>10.235559</td>\n",
              "      <td>15.555313</td>\n",
              "      <td>(0.27260035731506516,)</td>\n",
              "      <td>(0.27260035731506516, 10.23555948664335, 15.55...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#ff7f00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>beta</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>17.324673</td>\n",
              "      <td>35.189145</td>\n",
              "      <td>(2.8608688636729176, 8.262170861873983)</td>\n",
              "      <td>(2.8608688636729176, 8.262170861873983, 17.324...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#ffff33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>loggamma</td>\n",
              "      <td>0.001945</td>\n",
              "      <td>-1232.634688</td>\n",
              "      <td>172.552331</td>\n",
              "      <td>(1475.3814730129707,)</td>\n",
              "      <td>(1475.3814730129707, -1232.6346877973501, 172....</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#a65628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>expon</td>\n",
              "      <td>0.322892</td>\n",
              "      <td>18.0</td>\n",
              "      <td>8.375792</td>\n",
              "      <td>()</td>\n",
              "      <td>(18.0, 8.37579185520362)</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#f781bf</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>pareto</td>\n",
              "      <td>0.322892</td>\n",
              "      <td>-536870894.0</td>\n",
              "      <td>536870912.0</td>\n",
              "      <td>(64097929.673556685,)</td>\n",
              "      <td>(64097929.673556685, -536870894.0, 536870911.9...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#999999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>uniform</td>\n",
              "      <td>2.716536</td>\n",
              "      <td>18.0</td>\n",
              "      <td>24.2</td>\n",
              "      <td>()</td>\n",
              "      <td>(18.0, 24.200000000000003)</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#999999</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26d26f87-09aa-4e1d-bcba-0555ef5ebb6b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-26d26f87-09aa-4e1d-bcba-0555ef5ebb6b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-26d26f87-09aa-4e1d-bcba-0555ef5ebb6b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Kesimpulan: Variabel BMI berdistribusi normal"
      ],
      "metadata": {
        "id": "_ChRTeW43VZv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###The Distribution of Y"
      ],
      "metadata": {
        "id": "_xcDXNIEw6ex"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.displot(df[\"Y\"], bins=30, kind=\"hist\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "id": "hO14lR9uxAck",
        "outputId": "f834c11c-37bd-4b46-ef47-5c9956ad5f5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7fef0d6c79d0>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Initiate model\n",
        "dist3 = distfit(bins=25,alpha=0.02,stats='ks')\n",
        "\n",
        "#Fit to the data\n",
        "dist3.fit_transform(df[\"Y\"],verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TYB1yyh13Yal",
        "outputId": "a611e403-d11b-4cb9-ec12-45edeb9aff26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[distfit] >INFO> fit\n",
            "[distfit] >INFO> transform\n",
            "[distfit] >DEBUG> (152.13348416289594, 77.00574586945044)\n",
            "[distfit] >INFO> [norm      ] [0.00 sec] [ks: 0.0385821] [loc=152.133 scale=77.006]\n",
            "[distfit] >DEBUG> (25.0, 127.13348416289594)\n",
            "[distfit] >INFO> [expon     ] [0.00 sec] [ks: 0.545091] [loc=25.000 scale=127.133]\n",
            "[distfit] >DEBUG> (270265057.87305534, -34359738343.0, 34359738367.999996)\n",
            "[distfit] >INFO> [pareto    ] [0.00 sec] [ks: 0.545091] [loc=-34359738343.000 scale=34359738368.000]\n",
            "[distfit] >DEBUG> (1.6343449438402855, 157.0247145542748, 73.64165822064473)\n",
            "[distfit] >INFO> [dweibull  ] [0.02 sec] [ks: 0.0385821] [loc=157.025 scale=73.642]\n",
            "[distfit] >DEBUG> (127967.50529392948, 152.12481045573628, 76.98521783304597)\n",
            "[distfit] >INFO> [t         ] [0.19 sec] [ks: 0.0385821] [loc=152.125 scale=76.985]\n",
            "[distfit] >DEBUG> (0.029317901766728702, 116.52312667345038, 63.454691756821106)\n",
            "[distfit] >INFO> [genextreme] [0.17 sec] [ks: 0.148617] [loc=116.523 scale=63.455]\n",
            "[distfit] >DEBUG> (2.496376511103246, 20.737715299081657, 52.63462302106953)\n",
            "[distfit] >INFO> [gamma     ] [0.04 sec] [ks: 0.148617] [loc=20.738 scale=52.635]\n",
            "[distfit] >DEBUG> (0.44469088248930166, -29.00650970868123, 164.71283014005542)\n",
            "[distfit] >INFO> [lognorm   ] [0.13 sec] [ks: 0.148617] [loc=-29.007 scale=164.713]\n",
            "[distfit] >DEBUG> (1.4426253783295158, 2.3252460705550795, 24.571399437969912, 336.07755152525135)\n",
            "[distfit] >INFO> [beta      ] [0.10 sec] [ks: 0.148617] [loc=24.571 scale=336.078]\n",
            "[distfit] >DEBUG> (25.0, 321.0)\n",
            "[distfit] >INFO> [uniform   ] [0.00 sec] [ks: 3.22842] [loc=25.000 scale=321.000]\n",
            "[distfit] >DEBUG> (1185.0967497525658, -18957.377992291607, 2700.1785122368174)\n",
            "[distfit] >INFO> [loggamma  ] [0.06 sec] [ks: 0.0385821] [loc=-18957.378 scale=2700.179]\n",
            "[distfit] >INFO> Compute confidence intervals [parametric]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'model': {'name': 'norm',\n",
              "  'score': 0.03858212428217018,\n",
              "  'loc': 152.13348416289594,\n",
              "  'scale': 77.00574586945044,\n",
              "  'arg': (),\n",
              "  'params': (152.13348416289594, 77.00574586945044),\n",
              "  'model': <scipy.stats._distn_infrastructure.rv_continuous_frozen at 0x7fef0d6a3b50>,\n",
              "  'bootstrap_score': 0,\n",
              "  'bootstrap_pass': None,\n",
              "  'color': '#e41a1c',\n",
              "  'CII_min_alpha': -6.016982528878884,\n",
              "  'CII_max_alpha': 310.2839508546707},\n",
              " 'summary':           name     score            loc               scale  \\\n",
              " 0         norm  0.038582     152.133484           77.005746   \n",
              " 1     dweibull  0.038582     157.024715           73.641658   \n",
              " 2            t  0.038582      152.12481           76.985218   \n",
              " 3     loggamma  0.038582  -18957.377992         2700.178512   \n",
              " 4   genextreme  0.148617     116.523127           63.454692   \n",
              " 5        gamma  0.148617      20.737715           52.634623   \n",
              " 6      lognorm  0.148617      -29.00651           164.71283   \n",
              " 7         beta  0.148617      24.571399          336.077552   \n",
              " 8        expon  0.545091           25.0          127.133484   \n",
              " 9       pareto  0.545091 -34359738343.0  34359738367.999996   \n",
              " 10     uniform  3.228419           25.0               321.0   \n",
              " \n",
              "                                          arg  \\\n",
              " 0                                         ()   \n",
              " 1                      (1.6343449438402855,)   \n",
              " 2                      (127967.50529392948,)   \n",
              " 3                      (1185.0967497525658,)   \n",
              " 4                    (0.029317901766728702,)   \n",
              " 5                       (2.496376511103246,)   \n",
              " 6                     (0.44469088248930166,)   \n",
              " 7   (1.4426253783295158, 2.3252460705550795)   \n",
              " 8                                         ()   \n",
              " 9                      (270265057.87305534,)   \n",
              " 10                                        ()   \n",
              " \n",
              "                                                params  \\\n",
              " 0             (152.13348416289594, 77.00574586945044)   \n",
              " 1   (1.6343449438402855, 157.0247145542748, 73.641...   \n",
              " 2   (127967.50529392948, 152.12481045573628, 76.98...   \n",
              " 3   (1185.0967497525658, -18957.377992291607, 2700...   \n",
              " 4   (0.029317901766728702, 116.52312667345038, 63....   \n",
              " 5   (2.496376511103246, 20.737715299081657, 52.634...   \n",
              " 6   (0.44469088248930166, -29.00650970868123, 164....   \n",
              " 7   (1.4426253783295158, 2.3252460705550795, 24.57...   \n",
              " 8                          (25.0, 127.13348416289594)   \n",
              " 9   (270265057.87305534, -34359738343.0, 343597383...   \n",
              " 10                                      (25.0, 321.0)   \n",
              " \n",
              "                                                 model bootstrap_score  \\\n",
              " 0   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 1   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 2   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 3   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 4   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 5   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 6   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 7   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 8   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 9   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " 10  <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              " \n",
              "    bootstrap_pass    color  \n",
              " 0            None  #e41a1c  \n",
              " 1            None  #e41a1c  \n",
              " 2            None  #377eb8  \n",
              " 3            None  #4daf4a  \n",
              " 4            None  #984ea3  \n",
              " 5            None  #ff7f00  \n",
              " 6            None  #ffff33  \n",
              " 7            None  #a65628  \n",
              " 8            None  #f781bf  \n",
              " 9            None  #999999  \n",
              " 10           None  #999999  ,\n",
              " 'histdata': (array([0.00052861, 0.00317165, 0.00546229, 0.0061671 , 0.00546229,\n",
              "         0.0063433 , 0.00387646, 0.00334785, 0.00458127, 0.00475747,\n",
              "         0.00264304, 0.00405266, 0.00334785, 0.00370026, 0.00229064,\n",
              "         0.00229064, 0.00281924, 0.00229064, 0.00334785, 0.00334785,\n",
              "         0.00105722, 0.00105722, 0.00105722, 0.00035241, 0.00052861]),\n",
              "  array([ 31.42,  44.26,  57.1 ,  69.94,  82.78,  95.62, 108.46, 121.3 ,\n",
              "         134.14, 146.98, 159.82, 172.66, 185.5 , 198.34, 211.18, 224.02,\n",
              "         236.86, 249.7 , 262.54, 275.38, 288.22, 301.06, 313.9 , 326.74,\n",
              "         339.58])),\n",
              " 'size': 442,\n",
              " 'alpha': 0.02,\n",
              " 'stats': 'ks',\n",
              " 'bins': 25,\n",
              " 'bound': 'both',\n",
              " 'name': 'popular',\n",
              " 'method': 'parametric',\n",
              " 'multtest': 'fdr_bh',\n",
              " 'n_perm': 10000,\n",
              " 'smooth': None,\n",
              " 'weighted': True,\n",
              " 'f': 1.5,\n",
              " 'n_boots': None,\n",
              " 'random_state': None}"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dist3.summary"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 771
        },
        "id": "V0-TmB2w3gRG",
        "outputId": "0962fea3-fc0a-462d-dcc8-217ab3cc816d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          name     score            loc               scale  \\\n",
              "0         norm  0.038582     152.133484           77.005746   \n",
              "1     dweibull  0.038582     157.024715           73.641658   \n",
              "2            t  0.038582      152.12481           76.985218   \n",
              "3     loggamma  0.038582  -18957.377992         2700.178512   \n",
              "4   genextreme  0.148617     116.523127           63.454692   \n",
              "5        gamma  0.148617      20.737715           52.634623   \n",
              "6      lognorm  0.148617      -29.00651           164.71283   \n",
              "7         beta  0.148617      24.571399          336.077552   \n",
              "8        expon  0.545091           25.0          127.133484   \n",
              "9       pareto  0.545091 -34359738343.0  34359738367.999996   \n",
              "10     uniform  3.228419           25.0               321.0   \n",
              "\n",
              "                                         arg  \\\n",
              "0                                         ()   \n",
              "1                      (1.6343449438402855,)   \n",
              "2                      (127967.50529392948,)   \n",
              "3                      (1185.0967497525658,)   \n",
              "4                    (0.029317901766728702,)   \n",
              "5                       (2.496376511103246,)   \n",
              "6                     (0.44469088248930166,)   \n",
              "7   (1.4426253783295158, 2.3252460705550795)   \n",
              "8                                         ()   \n",
              "9                      (270265057.87305534,)   \n",
              "10                                        ()   \n",
              "\n",
              "                                               params  \\\n",
              "0             (152.13348416289594, 77.00574586945044)   \n",
              "1   (1.6343449438402855, 157.0247145542748, 73.641...   \n",
              "2   (127967.50529392948, 152.12481045573628, 76.98...   \n",
              "3   (1185.0967497525658, -18957.377992291607, 2700...   \n",
              "4   (0.029317901766728702, 116.52312667345038, 63....   \n",
              "5   (2.496376511103246, 20.737715299081657, 52.634...   \n",
              "6   (0.44469088248930166, -29.00650970868123, 164....   \n",
              "7   (1.4426253783295158, 2.3252460705550795, 24.57...   \n",
              "8                          (25.0, 127.13348416289594)   \n",
              "9   (270265057.87305534, -34359738343.0, 343597383...   \n",
              "10                                      (25.0, 321.0)   \n",
              "\n",
              "                                                model bootstrap_score  \\\n",
              "0   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "1   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "2   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "3   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "4   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "5   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "6   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "7   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "8   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "9   <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "10  <scipy.stats._distn_infrastructure.rv_continuo...               0   \n",
              "\n",
              "   bootstrap_pass    color  \n",
              "0            None  #e41a1c  \n",
              "1            None  #e41a1c  \n",
              "2            None  #377eb8  \n",
              "3            None  #4daf4a  \n",
              "4            None  #984ea3  \n",
              "5            None  #ff7f00  \n",
              "6            None  #ffff33  \n",
              "7            None  #a65628  \n",
              "8            None  #f781bf  \n",
              "9            None  #999999  \n",
              "10           None  #999999  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9f343b36-6eff-4d5b-8d5b-cc7b374ec100\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>score</th>\n",
              "      <th>loc</th>\n",
              "      <th>scale</th>\n",
              "      <th>arg</th>\n",
              "      <th>params</th>\n",
              "      <th>model</th>\n",
              "      <th>bootstrap_score</th>\n",
              "      <th>bootstrap_pass</th>\n",
              "      <th>color</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>norm</td>\n",
              "      <td>0.038582</td>\n",
              "      <td>152.133484</td>\n",
              "      <td>77.005746</td>\n",
              "      <td>()</td>\n",
              "      <td>(152.13348416289594, 77.00574586945044)</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#e41a1c</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>dweibull</td>\n",
              "      <td>0.038582</td>\n",
              "      <td>157.024715</td>\n",
              "      <td>73.641658</td>\n",
              "      <td>(1.6343449438402855,)</td>\n",
              "      <td>(1.6343449438402855, 157.0247145542748, 73.641...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#e41a1c</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>t</td>\n",
              "      <td>0.038582</td>\n",
              "      <td>152.12481</td>\n",
              "      <td>76.985218</td>\n",
              "      <td>(127967.50529392948,)</td>\n",
              "      <td>(127967.50529392948, 152.12481045573628, 76.98...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#377eb8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>loggamma</td>\n",
              "      <td>0.038582</td>\n",
              "      <td>-18957.377992</td>\n",
              "      <td>2700.178512</td>\n",
              "      <td>(1185.0967497525658,)</td>\n",
              "      <td>(1185.0967497525658, -18957.377992291607, 2700...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#4daf4a</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>genextreme</td>\n",
              "      <td>0.148617</td>\n",
              "      <td>116.523127</td>\n",
              "      <td>63.454692</td>\n",
              "      <td>(0.029317901766728702,)</td>\n",
              "      <td>(0.029317901766728702, 116.52312667345038, 63....</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#984ea3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>gamma</td>\n",
              "      <td>0.148617</td>\n",
              "      <td>20.737715</td>\n",
              "      <td>52.634623</td>\n",
              "      <td>(2.496376511103246,)</td>\n",
              "      <td>(2.496376511103246, 20.737715299081657, 52.634...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#ff7f00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>lognorm</td>\n",
              "      <td>0.148617</td>\n",
              "      <td>-29.00651</td>\n",
              "      <td>164.71283</td>\n",
              "      <td>(0.44469088248930166,)</td>\n",
              "      <td>(0.44469088248930166, -29.00650970868123, 164....</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#ffff33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>beta</td>\n",
              "      <td>0.148617</td>\n",
              "      <td>24.571399</td>\n",
              "      <td>336.077552</td>\n",
              "      <td>(1.4426253783295158, 2.3252460705550795)</td>\n",
              "      <td>(1.4426253783295158, 2.3252460705550795, 24.57...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#a65628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>expon</td>\n",
              "      <td>0.545091</td>\n",
              "      <td>25.0</td>\n",
              "      <td>127.133484</td>\n",
              "      <td>()</td>\n",
              "      <td>(25.0, 127.13348416289594)</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#f781bf</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>pareto</td>\n",
              "      <td>0.545091</td>\n",
              "      <td>-34359738343.0</td>\n",
              "      <td>34359738367.999996</td>\n",
              "      <td>(270265057.87305534,)</td>\n",
              "      <td>(270265057.87305534, -34359738343.0, 343597383...</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#999999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>uniform</td>\n",
              "      <td>3.228419</td>\n",
              "      <td>25.0</td>\n",
              "      <td>321.0</td>\n",
              "      <td>()</td>\n",
              "      <td>(25.0, 321.0)</td>\n",
              "      <td>&lt;scipy.stats._distn_infrastructure.rv_continuo...</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "      <td>#999999</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f343b36-6eff-4d5b-8d5b-cc7b374ec100')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9f343b36-6eff-4d5b-8d5b-cc7b374ec100 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9f343b36-6eff-4d5b-8d5b-cc7b374ec100');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Kesimpulan: Variabel Y berdistribusi normal"
      ],
      "metadata": {
        "id": "V6VFVWaV3mJh"
      }
    }
  ],
  "metadata": {
    "interpreter": {
      "hash": "86193a1ab0ba47eac1c69c1756090baa3b420b3eea7d4aafab8b85f8b312f0c5"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "colab": {
      "provenance": [],
      "toc_visible": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
